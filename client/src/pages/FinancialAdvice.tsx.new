import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Loader2, BrainCircuit, ArrowRight, Lightbulb, LineChart, AlertCircle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';

// Custom component for tab content
const TabPanel = ({ children, value, activeTab }: { 
  children: React.ReactNode; 
  value: string; 
  activeTab: string;
}) => {
  return (
    <div className={`${activeTab === value ? 'block' : 'hidden'} space-y-4`}>
      {children}
    </div>
  );
};

// Default userId for demo purposes (would be retrieved from auth context in production)
const DEMO_USER_ID = 1;

const FinancialAdvice = () => {
  const { toast } = useToast();
  const [question, setQuestion] = useState('');
  const [activeTab, setActiveTab] = useState('advice');
  const [expensePeriod, setExpensePeriod] = useState<'week' | 'month' | 'year'>('month');
  const [showFullAdvice, setShowFullAdvice] = useState(false);
  
  // Add local loading states to avoid buttons being stuck
  const [manuallyLoadingAdvice, setManuallyLoadingAdvice] = useState(false);
  const [manuallyLoadingGoals, setManuallyLoadingGoals] = useState(false);
  const [manuallyLoadingAnalysis, setManuallyLoadingAnalysis] = useState(false);
  
  // Fetch general financial advice
  const { 
    data: adviceData, 
    isPending: isQueryLoading,
    refetch: refetchAdvice,
    isError: isAdviceError 
  } = useQuery({
    queryKey: ['/api/ai/financial-advice', question],
    queryFn: async () => {
      try {
        console.log("Fetching financial advice...");
        const response = await apiRequest('/api/ai/financial-advice', {
          method: 'POST',
          body: JSON.stringify({ 
            userId: DEMO_USER_ID, 
            question: question || undefined 
          })
        });
        
        console.log("Advice response received:", response);
        
        // Record that the user used AI advice
        await apiRequest('/api/ai/mark-advice-used', {
          method: 'POST',
          body: JSON.stringify({ 
            userId: DEMO_USER_ID,
            adviceType: 'financial_advice'
          })
        }).catch(err => {
          // Log but don't fail the main request if tracking fails
          console.error('Error tracking advice usage:', err);
        });
        
        return response;
      } catch (error) {
        console.error('Error fetching financial advice:', error);
        throw error; // Re-throw to let React Query handle it
      }
    },
    enabled: false, // We'll manually trigger this
    retry: 1,      // Only retry once on failure
  });

  // Fetch AI suggested goals
  const { 
    data: goalSuggestions, 
    isPending: isGoalsLoading,
    refetch: refetchGoals,
    isError: isGoalsError 
  } = useQuery({
    queryKey: ['/api/ai/suggest-goals'],
    queryFn: async () => {
      try {
        const response = await apiRequest('/api/ai/suggest-goals', {
          method: 'POST',
          body: JSON.stringify({ 
            userId: DEMO_USER_ID
          })
        });
        
        // Record that the user used AI goal suggestions
        await apiRequest('/api/ai/mark-advice-used', {
          method: 'POST',
          body: JSON.stringify({ 
            userId: DEMO_USER_ID,
            adviceType: 'goal_suggestion'
          })
        }).catch(err => {
          // Log but don't fail the main request if tracking fails
          console.error('Error tracking goal suggestion usage:', err);
        });
        
        return response;
      } catch (error) {
        console.error('Error fetching goal suggestions:', error);
        throw error; // Re-throw to let React Query handle it
      }
    },
    enabled: false, // We'll manually trigger this
    retry: 1,      // Only retry once on failure
  });
  
  // Fetch expense analysis
  const { 
    data: expenseAnalysis,
    isPending: isAnalysisLoading,
    refetch: refetchAnalysis,
    isError: isAnalysisError
  } = useQuery({
    queryKey: ['/api/ai/analyze-expenses', expensePeriod],
    queryFn: async () => {
      try {
        const response = await apiRequest('/api/ai/analyze-expenses', {
          method: 'POST',
          body: JSON.stringify({ 
            userId: DEMO_USER_ID,
            period: expensePeriod
          })
        });
        
        // Record that the user used AI expense analysis
        await apiRequest('/api/ai/mark-advice-used', {
          method: 'POST',
          body: JSON.stringify({ 
            userId: DEMO_USER_ID,
            adviceType: 'expense_analysis'
          })
        }).catch(err => {
          // Log but don't fail the main request if tracking fails
          console.error('Error tracking expense analysis usage:', err);
        });
        
        return response;
      } catch (error) {
        console.error('Error analyzing expenses:', error);
        throw error; // Re-throw to let React Query handle it
      }
    },
    enabled: false, // We'll manually trigger this
    retry: 1,      // Only retry once on failure
  });
  
  // Combine loading states
  const isAdviceLoading = isQueryLoading || manuallyLoadingAdvice;
  const isGoalSuggestionsLoading = isGoalsLoading || manuallyLoadingGoals;
  const isExpenseAnalysisLoading = isAnalysisLoading || manuallyLoadingAnalysis;
  
  // Create goal from suggestion mutation
  const createGoalMutation = useMutation({
    mutationFn: async (goalData: any) => {
      return await apiRequest('/api/goals', {
        method: 'POST',
        body: JSON.stringify({
          ...goalData,
          userId: DEMO_USER_ID,
          startDate: new Date(),
          currentAmount: "0",
          isCompleted: false
        })
      });
    },
    onSuccess: () => {
      toast({
        title: "Goal Created",
        description: "Your new financial goal has been created successfully!",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/goals'] });
      queryClient.invalidateQueries({ queryKey: [`/api/users/${DEMO_USER_ID}/goals`] });
    },
    onError: (error) => {
      toast({
        title: "Error Creating Goal",
        description: "There was a problem creating your goal. Please try again.",
        variant: "destructive",
      });
    }
  });
  
  const handleGetAdvice = async () => {
    try {
      console.log("Generating advice button clicked");
      // Set our manual loading state to true before starting the request
      setManuallyLoadingAdvice(true);
      await refetchAdvice();
    } catch (error) {
      console.error("Error fetching advice:", error);
      // Make sure to reset loading state on error
      setManuallyLoadingAdvice(false);
      toast({
        title: "Error",
        description: "Failed to generate financial advice. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const handleGetGoalSuggestions = async () => {
    try {
      console.log("Generating goal suggestions button clicked");
      // Set manual loading state to true before starting the request
      setManuallyLoadingGoals(true);
      await refetchGoals();
    } catch (error) {
      console.error("Error fetching goal suggestions:", error);
      // Make sure to reset loading state on error
      setManuallyLoadingGoals(false);
      toast({
        title: "Error",
        description: "Failed to generate goal suggestions. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const handleAnalyzeExpenses = async () => {
    try {
      console.log("Analyzing expenses button clicked");
      // Set manual loading state to true before starting the request
      setManuallyLoadingAnalysis(true);
      await refetchAnalysis();
    } catch (error) {
      console.error("Error analyzing expenses:", error);
      // Make sure to reset loading state on error
      setManuallyLoadingAnalysis(false);
      toast({
        title: "Error",
        description: "Failed to analyze expenses. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const handleCreateGoalFromSuggestion = (goal: any) => {
    createGoalMutation.mutate({
      name: goal.name,
      targetAmount: goal.targetAmount.toString(),
      type: 'savings',
      description: goal.description,
      deadline: new Date(new Date().setMonth(new Date().getMonth() + 
        (goal.timeframe.includes('month') ? 
          parseInt(goal.timeframe.split(' ')[0]) : 
          parseInt(goal.timeframe.split(' ')[0]) * 12)))
    });
  };
  
  // Render helpers
  const renderAdviceSuggestions = () => {
    if (!adviceData?.suggestions || adviceData.suggestions.length === 0) {
      return <p className="text-muted-foreground">No suggestions available.</p>;
    }
    
    return (
      <div className="space-y-2 mt-4">
        {adviceData.suggestions.map((suggestion: string, index: number) => (
          <div key={index} className="flex items-start gap-2">
            <div className="bg-primary/10 p-1 rounded-full mt-0.5">
              <Lightbulb className="h-4 w-4 text-primary" />
            </div>
            <p>{suggestion}</p>
          </div>
        ))}
      </div>
    );
  };
  
  return (
    <div className="w-full max-w-full overflow-x-hidden px-3 sm:px-6 py-4 sm:py-6">
      <h1 className="text-2xl sm:text-3xl font-bold tracking-tight mb-4 sm:mb-6">
        AI-Powered Financial Advice
      </h1>
      
      <div className="space-y-4">
        <div className="flex flex-row gap-2 w-full overflow-x-auto pb-2">
          <Button
            variant={activeTab === "advice" ? "default" : "outline"}
            className="flex items-center whitespace-nowrap"
            onClick={() => setActiveTab("advice")}
          >
            <BrainCircuit className="h-4 w-4 mr-1 sm:mr-2 flex-shrink-0" />
            <span className="whitespace-nowrap">Financial Advice</span>
          </Button>
          
          <Button
            variant={activeTab === "goals" ? "default" : "outline"}
            className="flex items-center whitespace-nowrap"
            onClick={() => setActiveTab("goals")}
          >
            <Lightbulb className="h-4 w-4 mr-1 sm:mr-2 flex-shrink-0" />
            <span className="whitespace-nowrap">Goal Suggestions</span>
          </Button>
          
          <Button
            variant={activeTab === "expenses" ? "default" : "outline"}
            className="flex items-center whitespace-nowrap"
            onClick={() => setActiveTab("expenses")}
          >
            <LineChart className="h-4 w-4 mr-1 sm:mr-2 flex-shrink-0" />
            <span className="whitespace-nowrap">Expense Analysis</span>
          </Button>
        </div>
        
        {/* Financial Advice Tab */}
        <TabPanel value="advice" activeTab={activeTab}>
          <Card className="overflow-hidden border-gray-200">
            <CardHeader className="px-4 py-4 sm:px-6 sm:py-6">
              <CardTitle className="text-lg sm:text-xl mb-2">Get Personalized Financial Advice</CardTitle>
              <CardDescription className="text-xs sm:text-sm max-w-full whitespace-normal break-words">
                Our AI will provide customized financial advice based on your income, expenses, and goals.
              </CardDescription>
            </CardHeader>
            <CardContent className="px-4 py-4 sm:px-6 sm:py-6">
              <div className="space-y-3 sm:space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="question" className="text-sm font-medium">Ask a specific question (optional)</Label>
                  <Textarea
                    id="question"
                    placeholder="E.g., How can I save more money for retirement? Should I focus on reducing expenses?"
                    className="min-h-[80px] sm:min-h-[100px] text-sm sm:text-base"
                    value={question}
                    onChange={(e) => setQuestion(e.target.value)}
                  />
                </div>
                
                {isAdviceError && (
                  <Alert variant="destructive">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>Error</AlertTitle>
                    <AlertDescription>
                      {adviceData?.errorType === "quota_exceeded" 
                        ? "OpenAI API quota has been exceeded. Please update the API key or billing plan."
                        : adviceData?.errorType === "rate_limited"
                        ? "Too many requests to the AI service. Please try again in a few minutes."
                        : "Unable to generate financial advice at this time. Please try again later."}
                    </AlertDescription>
                  </Alert>
                )}
                
                {adviceData && (
                  <div className="mt-6 space-y-4">
                    {adviceData.summary && (
                      <Alert>
                        <AlertTitle>Summary</AlertTitle>
                        <AlertDescription>{adviceData.summary}</AlertDescription>
                      </Alert>
                    )}
                    
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <h3 className="text-lg font-semibold">Detailed Advice</h3>
                        <div className="flex items-center space-x-2">
                          <Switch 
                            id="show-full" 
                            checked={showFullAdvice}
                            onCheckedChange={setShowFullAdvice}
                          />
                          <Label htmlFor="show-full">Show Full Details</Label>
                        </div>
                      </div>
                      
                      <div className="text-sm leading-relaxed">
                        {showFullAdvice ? (
                          <div className="whitespace-pre-line">{adviceData.advice}</div>
                        ) : (
                          <div>{adviceData.advice.substring(0, 300)}... 
                            <Button variant="link" onClick={() => setShowFullAdvice(true)} className="p-0 h-auto">
                              Read more
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="text-lg font-semibold mb-2">Suggested Actions</h3>
                      {renderAdviceSuggestions()}
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
            <CardFooter>
              <Button 
                onClick={handleGetAdvice} 
                disabled={isAdviceLoading}
                className="w-full"
              >
                {isAdviceLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating Advice...
                  </>
                ) : (
                  <>
                    {adviceData ? "Refresh Advice" : "Get Financial Advice"}
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </TabPanel>
        
        {/* Goal Suggestions Tab */}
        <TabPanel value="goals" activeTab={activeTab}>
          <Card className="overflow-hidden border-gray-200">
            <CardHeader className="px-4 py-4 sm:px-6 sm:py-6">
              <CardTitle className="text-lg sm:text-xl mb-2">AI-Suggested Financial Goals</CardTitle>
              <CardDescription className="text-xs sm:text-sm max-w-full whitespace-normal break-words">
                Based on your income patterns, our AI can suggest realistic financial goals to help you succeed.
              </CardDescription>
            </CardHeader>
            <CardContent className="px-4 py-4 sm:px-6 sm:py-6">
              {isGoalsError && (
                <Alert variant="destructive" className="mb-2">
                  <AlertCircle className="h-3 w-3 sm:h-4 sm:w-4" />
                  <AlertTitle className="text-xs sm:text-sm font-medium">Error</AlertTitle>
                  <AlertDescription className="text-xs sm:text-sm">
                    Unable to generate goal suggestions at this time. Please try again later.
                  </AlertDescription>
                </Alert>
              )}
              
              {goalSuggestions && goalSuggestions.goals && (
                <div className="space-y-4 sm:space-y-6">
                  {goalSuggestions.goals.map((goal: any, index: number) => (
                    <Card key={index} className="overflow-hidden border-gray-100">
                      <div className="bg-primary/10 px-3 sm:px-4 py-2 flex flex-col sm:flex-row sm:justify-between sm:items-center gap-1 sm:gap-0">
                        <h3 className="font-medium text-sm sm:text-base">{goal.name}</h3>
                        <Badge variant="outline" className="self-start sm:self-auto text-xs">{goal.timeframe}</Badge>
                      </div>
                      <CardContent className="p-3 sm:p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-xs sm:text-sm text-muted-foreground">Target Amount</span>
                          <span className="font-semibold text-sm sm:text-base">${typeof goal.targetAmount === 'number' ? 
                            goal.targetAmount.toFixed(2) : goal.targetAmount}</span>
                        </div>
                        <p className="text-xs sm:text-sm mb-3 sm:mb-4">{goal.description}</p>
                        <Button 
                          variant="outline" 
                          className="w-full text-xs sm:text-sm"
                          onClick={() => handleCreateGoalFromSuggestion(goal)}
                          disabled={createGoalMutation.isPending}
                        >
                          {createGoalMutation.isPending ? (
                            <Loader2 className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4 animate-spin" />
                          ) : (
                            <>Create This Goal</>
                          )}
                        </Button>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
              
              {!goalSuggestions && !isGoalSuggestionsLoading && (
                <div className="flex flex-col items-center justify-center text-center p-4 sm:p-8">
                  <Lightbulb className="h-8 w-8 sm:h-12 sm:w-12 text-muted-foreground mb-3 sm:mb-4" />
                  <h3 className="text-base sm:text-lg font-medium mb-1 sm:mb-2">No Goal Suggestions Yet</h3>
                  <p className="text-xs sm:text-sm text-muted-foreground mb-4 sm:mb-6">
                    Click the button below to generate AI-powered goal suggestions based on your financial situation.
                  </p>
                </div>
              )}
            </CardContent>
            <CardFooter className="px-4 py-4 sm:px-6">
              <Button 
                onClick={handleGetGoalSuggestions} 
                disabled={isGoalSuggestionsLoading}
                className="w-full text-sm sm:text-base"
              >
                {isGoalSuggestionsLoading ? (
                  <>
                    <Loader2 className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4 animate-spin" />
                    <span className="whitespace-nowrap">Generating Suggestions...</span>
                  </>
                ) : (
                  <>
                    <span className="whitespace-nowrap">{goalSuggestions ? "Refresh Goal Suggestions" : "Get Goal Suggestions"}</span>
                    <ArrowRight className="ml-1 sm:ml-2 h-3 w-3 sm:h-4 sm:w-4" />
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </TabPanel>
        
        {/* Expense Analysis Tab */}
        <TabPanel value="expenses" activeTab={activeTab}>
          <Card className="overflow-hidden border-gray-200">
            <CardHeader className="px-4 py-4 sm:px-6 sm:py-6">
              <CardTitle className="text-lg sm:text-xl mb-2">Expense Analysis & Optimization</CardTitle>
              <CardDescription className="text-xs sm:text-sm max-w-full whitespace-normal break-words">
                Let our AI analyze your spending patterns and suggest ways to optimize your expenses.
              </CardDescription>
            </CardHeader>
            <CardContent className="px-4 py-4 sm:px-6 sm:py-6">
              <div className="space-y-4 sm:space-y-6">
                <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
                  <Label className="text-sm font-medium sm:text-base">Time Period:</Label>
                  <div className="flex border rounded-md overflow-hidden w-full sm:w-auto">
                    <Button 
                      type="button"
                      variant={expensePeriod === 'week' ? 'default' : 'ghost'} 
                      className="rounded-none flex-1 text-xs sm:text-sm py-1 px-2 sm:py-2 sm:px-3"
                      onClick={() => setExpensePeriod('week')}
                    >
                      Week
                    </Button>
                    <Separator orientation="vertical" />
                    <Button 
                      type="button"
                      variant={expensePeriod === 'month' ? 'default' : 'ghost'} 
                      className="rounded-none flex-1 text-xs sm:text-sm py-1 px-2 sm:py-2 sm:px-3"
                      onClick={() => setExpensePeriod('month')}
                    >
                      Month
                    </Button>
                    <Separator orientation="vertical" />
                    <Button 
                      type="button"
                      variant={expensePeriod === 'year' ? 'default' : 'ghost'} 
                      className="rounded-none flex-1 text-xs sm:text-sm py-1 px-2 sm:py-2 sm:px-3"
                      onClick={() => setExpensePeriod('year')}
                    >
                      Year
                    </Button>
                  </div>
                </div>
                
                {isAnalysisError && (
                  <Alert variant="destructive">
                    <AlertCircle className="h-3 w-3 sm:h-4 sm:w-4" />
                    <AlertTitle className="text-xs sm:text-sm font-medium">Error</AlertTitle>
                    <AlertDescription className="text-xs sm:text-sm">
                      Unable to analyze expenses at this time. Please try again later.
                    </AlertDescription>
                  </Alert>
                )}
                
                {expenseAnalysis ? (
                  <div className="space-y-4 sm:space-y-6">
                    {expenseAnalysis.summary && (
                      <Alert>
                        <AlertTitle className="text-sm sm:text-base">Summary</AlertTitle>
                        <AlertDescription className="text-xs sm:text-sm">
                          {expenseAnalysis.summary}
                        </AlertDescription>
                      </Alert>
                    )}
                    
                    {expenseAnalysis.topCategories && (
                      <div>
                        <h3 className="text-sm sm:text-base font-medium mb-2">Top Spending Categories</h3>
                        <div className="space-y-2">
                          {expenseAnalysis.topCategories.map((category: any, index: number) => (
                            <div 
                              key={index} 
                              className="flex justify-between items-center p-2 sm:p-3 border rounded-md bg-background/50"
                            >
                              <div className="flex items-center gap-2">
                                <div className={`w-2 h-8 rounded-sm bg-primary/70 opacity-${90 - (index * 20)}`} />
                                <span className="text-xs sm:text-sm font-medium">{category.name}</span>
                              </div>
                              <div className="text-right">
                                <span className="block text-xs sm:text-sm font-semibold">${typeof category.amount === 'number' ? 
                                  category.amount.toFixed(2) : category.amount}</span>
                                <span className="block text-xs text-muted-foreground">{category.percentage}%</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {expenseAnalysis.insights && (
                      <div>
                        <h3 className="text-sm sm:text-base font-medium mb-2">Insights</h3>
                        <div className="space-y-2">
                          {expenseAnalysis.insights.map((insight: string, index: number) => (
                            <div key={index} className="flex items-start gap-2 text-xs sm:text-sm">
                              <div className="bg-primary/10 p-1 rounded-full mt-0.5 flex-shrink-0">
                                <Lightbulb className="h-3 w-3 sm:h-4 sm:w-4 text-primary" />
                              </div>
                              <p>{insight}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {expenseAnalysis.recommendations && (
                      <div>
                        <h3 className="text-sm sm:text-base font-medium mb-2">Recommendations</h3>
                        <div className="space-y-2">
                          {expenseAnalysis.recommendations.map((recommendation: any, index: number) => (
                            <Card key={index} className="overflow-hidden">
                              <div className="bg-primary/5 p-2 sm:p-3">
                                <h4 className="font-medium text-xs sm:text-sm">{recommendation.title}</h4>
                              </div>
                              <CardContent className="p-2 sm:p-3 text-xs sm:text-sm">
                                <p>{recommendation.description}</p>
                                {recommendation.savingsEstimate && (
                                  <div className="mt-2 text-xs sm:text-sm bg-primary/10 rounded-md p-2 text-center">
                                    <span className="font-semibold">Potential savings: ${recommendation.savingsEstimate}</span>
                                  </div>
                                )}
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ) : !isExpenseAnalysisLoading && (
                  <div className="flex flex-col items-center justify-center text-center p-4 sm:p-8">
                    <LineChart className="h-8 w-8 sm:h-12 sm:w-12 text-muted-foreground mb-3 sm:mb-4" />
                    <h3 className="text-base sm:text-lg font-medium mb-1 sm:mb-2">No Expense Analysis Yet</h3>
                    <p className="text-xs sm:text-sm text-muted-foreground mb-4 sm:mb-6">
                      Click the button below to analyze your spending patterns and get personalized recommendations.
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
            <CardFooter>
              <Button 
                onClick={handleAnalyzeExpenses} 
                disabled={isExpenseAnalysisLoading}
                className="w-full text-sm sm:text-base"
              >
                {isExpenseAnalysisLoading ? (
                  <>
                    <Loader2 className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4 animate-spin" />
                    <span className="whitespace-nowrap">Analyzing Expenses...</span>
                  </>
                ) : (
                  <>
                    <span className="whitespace-nowrap">{expenseAnalysis ? "Refresh Analysis" : "Analyze Expenses"}</span>
                    <ArrowRight className="ml-1 sm:ml-2 h-3 w-3 sm:h-4 sm:w-4" />
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </TabPanel>
      </div>
    </div>
  );
};

export default FinancialAdvice;